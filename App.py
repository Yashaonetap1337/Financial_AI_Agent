import streamlit as st
import os
from datetime import datetime
from Financial_Agent import Financial_Agent

# # Streamlit UI
st.set_page_config(
    page_title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
st.markdown("""
<style>
    .stTextInput input, .stTextArea textarea {
        border-radius: 10px !important;
        padding: 10px !important;
    }
    .stButton button {
        width: 100%;
        border-radius: 10px;
        padding: 10px;
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
    }
    .stButton button:hover {
        background-color: #45a049;
    }
    .response-box {
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
        background-color: #f0f2f6;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    .highlight {
        background-color: #e6f7ff;
        padding: 15px;
        border-left: 4px solid #1890ff;
        border-radius: 0 5px 5px 0;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
st.markdown("""
<h1 style='text-align: center; color: #2c3e50; margin-bottom: 30px;'>
    üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
</h1>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.markdown("---")
    st.markdown("### üìä –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
    examples = [
        "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤ —è–Ω–≤–∞—Ä–µ 2025 –≤ —Ä—É–±–ª—è—Ö?",
        "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π 1000 USD –≤ RUB",
        "–ü–æ–∫–∞–∂–∏ –≤—Å–µ —Ç—Ä–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
        "–†–∞—Å—Å—á–∏—Ç–∞–π (500 + 250) * 0.2"
    ]
    for example in examples:
        if st.button(example, key=example):
            st.session_state.example_query = example


# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
col1, col2 = st.columns([3, 1])
with col1:
    query = st.text_area(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
        height=150,
        value=st.session_state.get('example_query', ''),
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤ —è–Ω–≤–∞—Ä–µ 2025 –≤ —Ä—É–±–ª—è—Ö?'"
    )

with col2:
    st.markdown("<div style='height: 28px'></div>", unsafe_allow_html=True)
    if st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
        st.session_state.run_query = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
if st.session_state.get('run_query', False):
    if not query.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    else:
        with st.spinner("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."):
            try:
                start_time = datetime.now()
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                response = Financial_Agent.run(query)
                
                processing_time = (datetime.now() - start_time).total_seconds()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.markdown("---")
                st.markdown(f"### üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ ({processing_time:.2f} —Å–µ–∫)")
                
                if isinstance(response, dict) and 'arguments' in response:
                    answer = response['arguments'].get('answer', '')
                    st.markdown(f"""
                    <div class="highlight">
                        <h4 style='margin-top:0;'>{answer}</h4>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div class="response-box">
                        {response}
                    </div>
                    """, unsafe_allow_html=True)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"):
                    st.json(response)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                if 'history' not in st.session_state:
                    st.session_state.history = []
                
                st.session_state.history.insert(0, {
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'query': query,
                    'response': answer if isinstance(response, dict) else str(response)
                })
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
if 'history' in st.session_state and st.session_state.history:
    st.markdown("---")
    st.markdown("### üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    for i, item in enumerate(st.session_state.history[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
        with st.expander(f"{i+1}. {item['query']} ({item['timestamp']})"):
            st.markdown(f"**–ó–∞–ø—Ä–æ—Å:** `{item['query']}`")
            st.markdown(f"**–û—Ç–≤–µ—Ç:** {item['response']}")